{"version":3,"sources":["components/Pokemons/Pokemons.jsx","components/Title/Title.jsx","App.js","serviceWorker.js","index.js"],"names":["Pokemons","props","useState","limit","setlimit","API_URL","pokemons","setPokemons","pokemonsData","setPokemonsData","pokemonsTypes","setPokemonsTypes","pokemonDescription","setPokemonDescription","typesAndColors","backgroundColor","color","onPokemonClick","useCallback","event","name","target","getAttribute","map","p","pokemon","id","stats","attack","defense","hp","spAttack","spDefense","speed","forEach","s","stat","base_stat","className","src","sprites","front_default","alt","title","weight","moves","length","buildTypesBlock","arr","items","itemSet","element","el","styles","push","style","loadSetData","a","fetch","response","json","data","results","responsePokeData","responseObject","pokeData","Promise","all","url","pokemonTypes","allTypes","types","type","useEffect","document","querySelector","addEventListener","removeEventListener","slice","key","data-name","onClick","Title","App","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.808fb5f4.chunk.js","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport './css/Pokemons.css';\r\n\r\nexport const Pokemons = (props) => {\r\n\r\n    let [limit, setlimit] = useState(12);\r\n\r\n    const PROXY_URL = \"https://cors-anywhere.herokuapp.com/\";\r\n    const API_URL = `http://pokeapi.co/api/v2/pokemon/?limit=999`;\r\n\r\n    const [pokemons, setPokemons] = useState([]);\r\n    const [pokemonsData, setPokemonsData] = useState([]);\r\n    const [pokemonsTypes, setPokemonsTypes] = useState([]);\r\n    const [pokemonDescription, setPokemonDescription] = useState([]);\r\n\r\n    const typesAndColors = {\r\n        \"normal\":\r\n        {\r\n            backgroundColor: \"#A3CB38\",\r\n            color: \"#000\"\r\n        },\r\n        \"fighting\":\r\n        {\r\n            backgroundColor: \"#3B3B98\",\r\n            color: \"#000\"\r\n        },\r\n        \"flying\":\r\n        {\r\n            backgroundColor: \"#9AECDB\",\r\n            color: \"#000\"\r\n        },\r\n        \"poison\":\r\n        {\r\n            backgroundColor: \"#a29bfe\",\r\n            color: \"#000\"\r\n        },\r\n        \"ground\":\r\n        {\r\n            backgroundColor: \"#4b4b4b\",\r\n            color: \"#000\"\r\n        },\r\n        \"rock\":\r\n        {\r\n            backgroundColor: \"#ccae62\",\r\n            color: \"#000\"\r\n        },\r\n        \"bug\":\r\n        {\r\n            backgroundColor: \"#badc58\",\r\n            color: \"#000\"\r\n        },\r\n        \"ghost\":\r\n        {\r\n            backgroundColor: \"#dfe6e9\",\r\n            color: \"#000\"\r\n        },\r\n        \"steel\":\r\n        {\r\n            backgroundColor: \"#95afc0\",\r\n            color: \"#000\"\r\n        },\r\n        \"fire\":\r\n        {\r\n            backgroundColor: \"#ff3838\",\r\n            color: \"#000\"\r\n        },\r\n        \"water\":\r\n        {\r\n            backgroundColor: \"#3498db\",\r\n            color: \"#000\"\r\n        },\r\n        \"grass\":\r\n        {\r\n            backgroundColor: \"#2ecc71\",\r\n            color: \"#000\"\r\n        },\r\n        \"electric\":\r\n        {\r\n            backgroundColor: \"#fdcb6e\",\r\n            color: \"#000\"\r\n        },\r\n        \"psychic\":\r\n        {\r\n            backgroundColor: \"#BDC581\",\r\n            color: \"#000\"\r\n        },\r\n        \"ice\":\r\n        {\r\n            backgroundColor: \"#c7ecee\",\r\n            color: \"#000\"\r\n        },\r\n        \"dragon\":\r\n        {\r\n            backgroundColor: \"#30336b\",\r\n            color: \"#fff\"\r\n        },\r\n        \"dark\":\r\n        {\r\n            backgroundColor: \"#2C3A47\",\r\n            color: \"#fff\"\r\n        },\r\n        \"fairy\":\r\n        {\r\n            backgroundColor: \"#e056fd\",\r\n            color: \"#000\"\r\n        },\r\n        \"unknown\":\r\n        {\r\n            backgroundColor: \"#000\",\r\n            color: \"#000\"\r\n        },\r\n        \"shadow\":\r\n        {\r\n            backgroundColor: \"#636e72\",\r\n            color: \"#000\"\r\n        }\r\n    };\r\n\r\n    const onPokemonClick = useCallback((event) => {\r\n\r\n        let name = event.target.getAttribute('data-name');\r\n\r\n        pokemonsData.map(p => {\r\n            if (p.name === name) {\r\n                \r\n                let pokemon = `${p.name} #`;\r\n\r\n                if ( +p.id >= 100 ) {\r\n                    pokemon += `${p.id}`;\r\n                } else\r\n                if ( +p.id < 100 && +p.id > 9 ) {\r\n                    pokemon += `0${p.id}`;\r\n                } else {\r\n                    pokemon += `00${p.id}`;\r\n                }\r\n\r\n                const stats = {\r\n                    attack: 0,\r\n                    defense: 0,\r\n                    hp: 0,\r\n                    spAttack: 0,\r\n                    spDefense: 0,\r\n                    speed: 0\r\n                };\r\n\r\n                p.stats.forEach(s => {                    \r\n\r\n                    if (s.stat.name === \"attack\") {\r\n                        stats.attack = s.base_stat\r\n                    }\r\n                    if (s.stat.name === \"defense\") {\r\n                        stats.defense = s.base_stat\r\n                    }\r\n                    if (s.stat.name === \"hp\") {\r\n                        stats.hp = s.base_stat\r\n                    }\r\n                    if (s.stat.name === \"special-attack\") {\r\n                        stats.spAttack = s.base_stat\r\n                    }\r\n                    if (s.stat.name === \"special-defense\") {\r\n                        stats.spDefense = s.base_stat\r\n                    }\r\n                    if (s.stat.name === \"speed\") {\r\n                        stats.speed = s.base_stat\r\n                    }\r\n                });\r\n\r\n                if (event.target !== null && name) {\r\n                    setPokemonDescription([]);\r\n                    setPokemonDescription(\r\n                        <div className=\"details\">\r\n                            <img\r\n                                src={p.sprites.front_default}\r\n                                alt=\"pokemon-img\"\r\n                                title={p.name}\r\n                                className=\"icon\"\r\n                            />\r\n                            { pokemon }\r\n                            <table className=\"stats\">\r\n                                <tbody>\r\n                                    <tr className=\"row\">\r\n                                        <td className=\"cell\">\r\n                                            Attack\r\n                                        </td>\r\n                                        <td className=\"cell wide-cell\">\r\n                                            {stats.attack}\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr className=\"row\">\r\n                                        <td className=\"cell\">\r\n                                            Defense\r\n                                        </td>\r\n                                        <td className=\"cell wide-cell\">\r\n                                            {stats.defense}\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr className=\"row\">\r\n                                        <td className=\"cell\">\r\n                                            HP\r\n                                        </td>\r\n                                        <td className=\"cell wide-cell\">\r\n                                            {stats.hp}\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr className=\"row\">\r\n                                        <td className=\"cell\">\r\n                                            SP Attack\r\n                                        </td>\r\n                                        <td className=\"cell wide-cell\">\r\n                                            {stats.spAttack}\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr className=\"row\">\r\n                                        <td className=\"cell\">\r\n                                            SP Defense\r\n                                        </td>\r\n                                        <td className=\"cell wide-cell\">\r\n                                            {stats.spDefense}\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr className=\"row\">\r\n                                        <td className=\"cell\">\r\n                                            Speed\r\n                                        </td>\r\n                                        <td className=\"cell wide-cell\">\r\n                                            {stats.speed}\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr className=\"row\">\r\n                                        <td className=\"cell\">\r\n                                            Weight\r\n                                        </td>\r\n                                        <td className=\"cell wide-cell\">\r\n                                            {p.weight}\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr className=\"row\">\r\n                                        <td className=\"cell\">\r\n                                            Total moves\r\n                                        </td>\r\n                                        <td className=\"cell wide-cell\">\r\n                                            {p.moves.length}\r\n                                        </td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    );\r\n                }\r\n            }\r\n\r\n            return [];\r\n        });\r\n\r\n    }, [pokemonsData]);\r\n\r\n    const buildTypesBlock = useCallback((arr) => {\r\n        let items = [],\r\n            itemSet = [];\r\n\r\n        arr.forEach(element => {\r\n            element.forEach(el => {\r\n                const styles = {\r\n                    backgroundColor: typesAndColors[el].backgroundColor,\r\n                    color: typesAndColors[el].color\r\n                };\r\n\r\n                itemSet.push(\r\n                    <div className=\"container__block\" style={styles}>\r\n                        {el}\r\n                    </div>\r\n                );\r\n            })\r\n\r\n            items.push(itemSet);\r\n            itemSet = [];\r\n        })\r\n\r\n        return items;\r\n    }, [typesAndColors]);\r\n\r\n    const loadSetData = useCallback(async () => {\r\n        // const response = await fetch(API_URL);\r\n        const response = await fetch(PROXY_URL + API_URL);\r\n        const data = await response.json();\r\n        setPokemons(data.results);\r\n\r\n        // get data for each pokemon via url\r\n\r\n        let responsePokeData = {},\r\n            responseObject = {},\r\n            pokeData = [];\r\n\r\n        await Promise.all(\r\n            pokemons.map(async el => {\r\n                responsePokeData = await fetch(el.url);\r\n                responseObject = await responsePokeData.json();\r\n                pokeData.push(responseObject);\r\n            })\r\n        );\r\n\r\n        setPokemonsData(pokeData);\r\n\r\n        // get all types for each pokemon\r\n\r\n        let pokemonTypes = [],\r\n            allTypes = [];\r\n\r\n        pokeData.map(el => {\r\n            for (let type of el.types) {\r\n                pokemonTypes.push(type.type.name);\r\n            }\r\n            allTypes.push(pokemonTypes);\r\n            pokemonTypes = [];\r\n\r\n            return [];\r\n        });\r\n\r\n        allTypes = buildTypesBlock(allTypes);\r\n        setPokemonsTypes(allTypes);\r\n    }, [API_URL, buildTypesBlock, pokemons]);\r\n\r\n    useEffect(() => {\r\n        document.querySelector(\".wrapper\").addEventListener(\"click\", onPokemonClick);\r\n\r\n        loadSetData();\r\n\r\n        return () => {\r\n            document.querySelector(\".wrapper\").removeEventListener(\"click\", onPokemonClick);\r\n        };\r\n    }, [loadSetData, onPokemonClick]);\r\n\r\n    // load next pokemons chunk\r\n\r\n    const loadMore = () => {\r\n        setlimit(limit + 12);\r\n    }\r\n\r\n    return (\r\n        <div className=\"Pokemons\">\r\n            <div className=\"column pokemons-list\">\r\n                <div className=\"wrapper\">\r\n                    {\r\n                        pokemonsData.slice(0, limit).map((p, id) => (\r\n                            <div className=\"box\" key={id}>\r\n                                <img\r\n                                    src={p.sprites.front_default}\r\n                                    alt=\"pokemon-img\"\r\n                                    title={p.name}\r\n                                    className=\"icon\"\r\n                                    data-name={p.name}\r\n                                />\r\n                                { p.name}\r\n                                <div className=\"container\">\r\n                                    { pokemonsTypes[id] }\r\n                                </div>\r\n                            </div>\r\n                        ))\r\n                    }\r\n                </div>\r\n                <button\r\n                    className=\"btn\"\r\n                    type=\"button\"\r\n                    onClick={loadMore}\r\n                >\r\n                    Load more\r\n                </button>\r\n            </div>\r\n\r\n            <div className=\"column description\">\r\n                { pokemonDescription }\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport './css/Title.css';\r\n\r\nexport const Title = (props) => {\r\n\r\n        \r\n    return (\r\n        <div className=\"Title\">\r\n            <div className=\"block\">\r\n                <h1 className=\"title\">\r\n                    Pokedex\r\n                </h1>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { Component } from 'react';\n// import { Description } from './components/Description/Description';\nimport { Pokemons } from './components/Pokemons/Pokemons';\nimport { Title } from './components/Title/Title';\nimport './css/App.css';\n\nexport default class App extends Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Title />\n        <div className=\"block\">\n          <Pokemons />\n          {/* <Description /> */}\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}